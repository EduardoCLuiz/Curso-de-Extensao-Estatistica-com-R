vetor1 <- c(1:10)
vetor1
length(vetor1)
mode(vetor1)
class(vetor1)
typeof(vetor1)
matriz1 <- matrix(1:10, nrow =2)
matriz1
length(matriz1)
mode(matriz1)
class(matriz1)
typeof(matriz1)
array1 <- array(1:5, dim=c(3,3,3))
array1
lenght(array1)
mode(array1)
class(array1)
typeof(array1)
View(iris)
lenght(iris)
mode(iris)
class(iris)
typeof(iris)
length(iris)
lista1 <- list(a=matriz1, b=vetor1)
lista1
length(lista1)
mode(lista1)
class(lista1)
typeof(lista1)
func1 <- function(x){
var1 <- x * x
return(var1)
}
func1(5)
class(func1)
# Removendo objetos
objects()
rm(array1, func1)
objects()
# Vetores de caracteres
vetor_caracter = c("Olá", "DSA")
vetor_caracter
# Vetor de floats
Vetor_numerico = c(1.90, 45.3, 300.5)
Vetor_numerico
# Vetor de valores complexos
vetor_complexo = c(5.2+3i, 3.8+4i)
vetor_complexo
# vetor de números inteiros
vetor_integer = c(2,4,6,8,10)
vetor_integer
#Utilizando seq()
vetor1 = seq(1:10)
vetor1
is.vector(vetor1)
# Utilizando rep()
vetor2 = rep(1:5)
vetor2
# Indexação de vetores
a <- c(1,2,3,4,5)
a
a[1]
a[6]
b <- c("Data", "Science")
b
b[1]
b[2]
b[3]
#Combinando vetores
v1 = c(2,3,5)
v2 = c("aa","bb","cc","dd","ee")
c(v1,v2)
# Operações com vetores
x = c(1,3,5,7)
y = c(2,4,6,8)
x * 5
x +y
x + y
x - y
x * y
x / y
# Somando vetores comnúmeros diferentes de elementos
alfa = c(10,20,30)
beta = c(1,2,3,4,5,6,7,8,9)
alfa + beta
# Vator nomeado
v = c("Barck", "Obama")
v
names(v) = c("Nome","Sobrenome")
v
v["Nome"]
# numeros de linhas
matrix (c(1,2,3,4,5,6), nr = 2)
matrix (c(1,2,3,4,5,6), nr = 3)
matrix (c(1,2,3,4,5,6), nr = 6)
# Número de Colunas
matrix (c(1,2,3,4,5,6), nc = 2)
# Número de Colunas
matrix (c(1,2,3,4,5), nc = 2)
# Criando matrizes a partir de vetores e preenchendo a partir
meus_dados = c(1:10)
matrix(data = meus_dados, nrow = 5, ncol = 2, byrow = T)
matrix(data = meus_dados, nrow = 5, ncol = 2)
# Fatiando a matriz
mat <- matrix(c(2,3,4,5), nr = 2)
mat
mat[1,2]
mat[2,2]
mat[1,3]
mat[,2]
# Criando uma matriz diagonal
matriz = 1:3
diag(matriz)
#Extraindo vetor de uma matriz diagonal
vetor = diago (matriz)
diag (vetor)
#Extraindo vetor de uma matriz diagonal
vetor = diag (matriz)
diag (vetor)
# Transposta da matriz
W <- matrix (c(2,4,8,12), nr = 2, ncol = 2)
W
t(W)
U <- t(W)
U
#Obtendo uma matriz inversa
solve(W)
# Multiplicação de matrizes
mat1 <- matrix(c(2,3,4,5), nr = 2)
mat1
mat2 <- matrix(c(6,7,8,9), nr = 2)
mat2
mat1 * mat2
mat1 / mat2
mat1 + mat2
mat1 - mat2
# Combinando Matrizes
mat4 <- matrix(c(2,3,4,5), nr = 2)
mat4
mat5 <- matrix(c(6,7,8,9), nr = 2)
mat5
cbind(mat4, mat5)
rbind(mat4, mat5)
# Desconstruindo a matriz
c(mat4)
setwd("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R")
# Vetor com dados numéricos
x <- c(10, 20, 30)
# Mostrando o vetor x
x
# Vetor de caracteres
y <- c("João", "Ana", "Pedro Henrique")
# Mostrando o vetor y
y
# Convertendo um vetor de caracteres em fator
w <- factor(c("Masculino", "Feminino", "Masculino"))
# Mostrando os níveis
levels (w)
# Criando um vetor convertido em fator com níveis não ordenados
cs <- factor(c("media", "baixa", "media", "alta", "baixa", "baixa", "alta", "
media", "alta", "media"))
# Ordenando os níveis do fator cs
cs <- factor(cs, ord=T, levels=c("baixa", "media", "alta"))
# Mostrando o objeto cs
cs
# Criando um vetor convertido em fator com níveis não ordenados
cs <- factor(c("media", "baixa", "media", "alta", "baixa", "baixa", "alta", "media", "alta", "media"))
# Ordenando os níveis do fator cs
cs <- factor(cs, ord=T, levels=c("baixa", "media", "alta"))
# Mostrando o objeto cs
cs
#Sequência de 1 a 50, com intervalo igual a 1
seq(1, 50, 1)
# Sequência de 1 a 50, com intervalo igual a 5
seq(1, 50, 5)
# Formato .txt
# Separador de colunas: tabulação
# Separador decimal: dec = "." (ponto)
# Primeira linha é cabeçalho: header = TRUE
dados1 <- read.table("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados/data1.txt", header=TRUE)
dados1
# Formato .txt
# Separador de colunas: sep = "," (vírgula)
# Separador decimal: dec = "." (ponto)
# Primeira linha é cabeçalho: header = TRUE
dados2 <- read.table("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados/data2.txt",sep=",", dec=".", h=T)
dados2
# Formato .csv
# Separador de colunas: sep = "," (vírgula)
# Separador decimal: dec = "." (ponto)
# Primeira linha é cabeçalho: header = TRUE
dados3 <- read.csv("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados/data3.csv", h=T)
dados3
# Formato .csv
# Separador de colunas: sep = ";" (ponto e vírgula)
# Separador decimal: dec = "," (vírgula)
# Primeira linha é cabeçalho: header = TRUE
dados4 <- read.csv2("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados/data4.csv", h=T)
dados4
# Carregando o pacote "readxl" (tem que instalar este pacote antes)
library("readxl")
install.packages("readxl1")
# Carregando o pacote "readxl" (tem que instalar este pacote antes)
library("readxl")
install.packages(readxl1)
install.packages("readxl")
# Carregando o pacote "readxl" (tem que instalar este pacote antes)
library("readxl")
# Separador decimal: dec = "," (vírgula)
# Primeira linha é cabeçalho
dados5 <- read_xlsx("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados/data5.xlsx")
dados5
# Verificando os arquivos no diretório atual do R
dir()
# Importando dados diretamente do diretório atual do R
# Nesse caso não precisa especificar o caminho do diretório
dados6 <- read.table("data1.txt", header = TRUE)
# Mudando o diretório atual do R
setwd("C:/Users/Eduardo/Documents/MeusProjetos/Curso-de-Extensao-Estatistica-com-R/Dados")
# Verificando o diretório atual do R
getwd()
# Verificando os arquivos no diretório atual do R
dir()
# Importando dados diretamente do diretório atual do R
# Nesse caso não precisa especificar o caminho do diretório
dados6 <- read.table("data1.txt", header = TRUE)
dados6
